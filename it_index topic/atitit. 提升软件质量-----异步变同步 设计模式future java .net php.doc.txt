atitit. 提升软件质量-----异步变同步 设计模式 多线程 future  ExecutorService  java .net php  

keyword
future java  多线程 ExecutorService 

异步的缺点
缺点是难以保证数据的准确性 （data integration），还有一个是需要更多的资源。
代码可读性


优点是可以并列处理一些工作，从而减少一些不必要的等待时间（blocking）

异步线程在 UI 和 网络连接方面很常见的
Future  ,FutureTask and ExecutorService方式
   FutureTask<Integer> future = new FutureTask<Integer>(callable);  
        new Thread(future).start();  
另一种方式使用Callable和Future，通过的submit方法执行Callable，并返回Future
   ExecutorService threadPool = Executors.newSingleThreadExecutor();  
        Future<Integer> future = threadPool.submit(new Callable<Integer>() {  
            public Integer call() throws Exception {  
                return new Random().nextInt(100);  
            }  
        });  

ExecutorService继承自Executor，它的目的是为我们管理Thread对象，从而简化并发编程，Executor使我们无需显示的去管理线程的生命周期，是JDK 5之后启动任务的首选方式。
        执行多个带返回值的任务，并取得多个返回值，代码如下： CompletionService


参考

paip.为什么使用多线程的原因. - attilax的专栏 - 博客频道 - CSDN.NET.htm
paip.java 多线程参数以及返回值Future FutureTask 的使用. - attilax的专栏 - 博客频道 - CSDN.NET.htm
Java线程(七)：Callable和Future - 高爽_Coder - 博客频道 - CSDN.NET.htm

