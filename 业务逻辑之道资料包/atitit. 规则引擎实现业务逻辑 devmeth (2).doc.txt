atitit. 规则引擎实现业务逻辑 devmeth 
11
22
33
33
44
55
55
55
66
66
77
77
88
88
8
规则引擎
要求施加在当今软件产品上的大多数复杂性是行为和功能方面的，从而导致组件实现具有复杂的业务逻辑。实现 J2EE 或 J2SE 应用程序中业务逻辑最常见的方法是编写 Java 代码来实现需求文档的规则和逻辑。在大多数情况下，该代码的错综复杂性使得维护和更新应用程序的业务逻辑成为一项令人畏惧的任务，甚至对于经验丰富的开发 人员来说也是如此。任何更改，不管多么简单，仍然会产生重编译和重部署成本。
规则引擎试图解决（或者至少降低）应用程序业务逻辑的开发和维 护中固有的问题和困难。可以将规则引擎看作实现复杂业务逻辑的框架。大多数规则引擎允许您使用声明性编程来表达对于某些给定信息或知识有效的结果。您可以 专注于已知为真的事实及其结果，也就是应用程序的业务逻辑。


使用规则引擎可以显著降低实现 Java 应用程序中业务规则逻辑的组件的复杂性。使用规则引擎以声明方法表达规则的应用程序比其他应用程序更容易维护和扩展

推理机和规则引擎
上面例子中的问题是典型的推理问题：根据已有的知识，分析实际情况并给出结论。如果由程序来处理推理过程，那么这个程序就叫做推理机/推理引擎（Inference Engine）。推理机是专家系统（专家系统是人工智能的一个分支）的核心模块。

 
推理引擎根据知识表示的不同采取的控制策略也是不同的，常见的类型包括基于神经网络、基于案例和基于规则的推理机。其中，基于规则的推理机易于理解、易于获取、易于管理，被广泛采用。这种推理引擎被称为“规则引擎”。
在规则引擎中，将知识表达为规则（rules），要分析的情况定义为事实（facts）。二者在内存中的存储分别称为Production Memory和Working Memory，如下图：
rules和facts是规则引擎接受的输入参数，而规则引擎本身包括两个组成部分：Pattern Matcher和Agenda。Pattern Matcher根据facts找到匹配的rules，Agenda管理PatternMatcher挑选出来的规则的执行次序。在外围，还会有一个执行引 擎（Execution Engine）负责根据Agenda输出的rules执行具体的操作。
其中Pattern Matcher是规则引擎负责推理的核心。和人类的思维相对应，规则引擎中也存在两种推理方式：正向推理（Forward-Chaining）和反向推理（Backward-Chaining）。
正向推理也叫演绎法，由事实驱动，从 一个初始的事实出发，不断地应用规则得出结论。首先在候选队列中选择一条规则作为启用规则进行推理，记录其结论作为下一步推理时的证据。如此重复这个过程，直到再无可用规则可被选用或者求得了所要求的解为止。
反向推理也叫归纳法，由目标驱动，首先提出某个假设，然后寻找支持该假设的证据，若所需的证据都能找到，说明原假设是正确的；若无论如何都找不到所需要的证据，则说明原假设不成立，此时需要另做新的假设。
 
规则引擎是一种相对简单的推理机，可以将规则引擎作为一种组件潜入到应用系统中，从而将业务决策从应用程序代码中分离出来，并使用预定义的规则语言编写业务决策。使用规则引擎带来的好处是：
1. 避免业务规则变化带来的重新编译和重新部署的问题；
2. 使用声明性编程方法，大大提高业务规则代码的可读性；
3. 开发人员不需要过多关注业务逻辑（根据各种情况判断发生了什么事情），可以专注于应用逻辑（在发生了什么事情时进行什么样的处理）
模式匹配_ç®æ³_(Rete、Treat、Leaps，HAL)
上面的处理由于涉及到组合，过程很复杂。有必要通过特定的算法优化匹配的效率。目前常见的模式匹配算法包括Rete、Treat、Leaps，HAL，Matchbox等。
Rete算法是目前使用最广泛的规则匹配算法，由Charles L. Forgy博士在1979年发明。Rete算法是一种快速的Forward-Chaining推理算法，其匹配速度与规则的数量无关。 Rete的高效率主要来自两个重要的假设：

 规则引擎的组成
来说，主要涉及几块：
    1、数据对象：在采用rete算法的规则引擎中，数据对象就是需要采用规则处理的数据。因为rete算法只能对类对象进行匹配处理，因此在执行时，必须先为其准备好基础数据。必须已经汇总好的数据，或者已经统计好的一些数据。
    2、规则语言：一般规则语言都是采用一种类java语言来定义，其实相当于一种动态语言。
    3、解析运行：基于rete算法的规则引擎一般都会将采用规则语言编辑的规则，直接导入到内存中，然后通过内存的匹配来对数据对象进行。


规则引擎使用的语言(限定的自然语言 && 脚本语言)
有多个规则引擎可供使用，其中包括商业和开放源码选择。商业规则引擎通常允许使用专用的类似英语的语言来表达规则。其他规则引擎允许使用脚本语言（比如 Groovy 或 Python）编写规则。

Drools 允许使用声明方式表达业务逻辑。可以使用非 XML 的本地语言编写规则，从而便于学习和理解。并且，还可以将 Java 代码直接嵌入到规则文件中，这令 Drools 的学习更加吸引人。Drools 还具有其他优点：
与 Java Rule Engine API（JSR 94）兼容

_å¨è§åå¼æä¸­ï¼éå¸¸ä¼ä½¿ç¨æç§è¡¨è¿°æ§çè¯­è¨ï¼èä¸æ¯ç¼ç¨è¯­è¨ï¼æ¥æè¿°è§å_。所以规则描述语言也是规则引擎的一个重要组成部分。
目前在规则描述语言方面，并没有一个通用的标准获得规则引擎厂商的广泛支持，大部分规则描述语言都是厂商私有的。
大体来说，规则语言可以分为结构化的（Structured)和基于标记的（Markup，通常为xml）。
常见的规则描述语言包括：
 
语言	类型	厂商
srl(Structured Rule Language)	结构化	Fair Isaac（以前是Blaze Software）
drl(Drools Rule Language)	结构化	Jboss（以前是drools.org)
RuleML(Rule Markup Language）	xml	www.ruleml.org
SRML(Simple Rule Markup Language)	xml	无
BRML(Business Rules Markup Language)	xml	无
SWRL（A Semantic Web Rule Language)	xml	www.daml.org
不管是哪种规则描述语言，都需要描述一组条件以及在此条件下执行的操作（即规则）。

 Drools 设计工具
在编写本文之际，Drools 规则引擎的最新版本是 4.0.4。这是一个重要更新。虽然现在还存在一些向后兼容性问题，但这个版本的特性让 Drools 比以前更有吸引力。例如，用于表达规则的新的本地语言比旧版本使用的 XML 格式更简单，更优雅。这种新语言所需的代码更少，并且格式易于阅读。
另一个值得注意的进步是，新版本提供了用于 Eclipse IDE（Versions 3.2 和 3.3）的一个 Drools 插件。我强烈建议您通过这个插件来使用 Drools。它可以简化使用 Drools 的项目开发，并且可以提高生产率。例如，该插件会检查规则文件是否有语法错误，并提供代码完成功能。它还使您可以调试规则文件，将调试时间从数小时减少到 几分钟。您可以在规则文件中添加断点，以便在规则执行期间的特定时刻检查对象的状态。这使您可以获得关于规则引擎在特定时刻所处理的知识（knowledge）（在本文的后面您将熟悉这个术语）的信息。
规则文件
如前所述，testRules.xml 文件包含规则引擎为机器分配测试和测试到期日期所遵循的规则。它使用 Drools 本地语言表达所包含的规则。
Drools 规则文件有一个或多个 rule 声明。每个 rule 声明由一个或多个 conditional 元素以及要执行的一个或多个 consequences 或 actions 组成。一个规则文件还可以有多个（即 0 个或多个）import 声明、多个 global 声明以及多个 function 声明。


避免在 Drools 规则文件中编写复杂的逻辑 (Java 代码)。
规则文件中定义的 Java 函数应该简短易懂。这不是 Drools 的技术限制。如果想要在规则文件中编写复杂的 Java 代码，也可以。但这样做可能会让您的代码更加难以测试、调试和维护。复杂的 Java 代码应该是 Java 类的一部分。如果需要 Drools 规则执行引擎调用复杂的 Java 代码，则可以将对包含复杂代码的 Java 类的引用作为全局数据传递给规则引擎。


实现JSR94的产品
主要的一些实现了JSR94的规则引擎产品如下：
 
产品	商业/开源	规则描述语言	算法	规则开发工具	规则保存	部署方式
_Drools_	开源	DRL,xDRL,DSL,Decision Table	ReteOO	Eclipse,excel	文件系统	jar
_Mandarax_	开源	RuleML	 	 	 	 
_OpenRules_	开源	Decision Table	Rete	excel	 	war
_JLisa_	开源	 	 	 	 	 
_Blaze_	商业	SRL	 	 	 	 
_WebSphere_ILOG_JRules_	商业	 	 	 	 	 
_JESS_	商业	 

规则引擎的缺点
采用上述技术，面对几个问题：
    1、数据准备工作量大。在将一些数据进行处理时，需要准备大量的已经计算好的数据。这样的话，像数据过滤逻辑、预处理逻辑、数据转换逻辑、存取数据逻辑等就必须采用编写程序的方式来进行。工作量很大。
     2、数据结构变化时，不能像规则一样动态变化。规则引擎使用的目的是为了企业系统将来在修改业务规则时，不再需要去修改程序。但是采用rete算法，使得只有规则能够动态变化。而数据结构的变化却不能，因此这限制了规则引擎的应用。
3、规则语言编写太多专业。规则语言其实比写java代码简化不了多少，工作量仍然很大。


何时使用规则引擎？
并非所有应用程序都应使用规则引擎。如果业务逻辑代码包括很多 if-else 语句，则应考虑使用一个规则引擎。维护复杂的 Boolean 逻辑可能是非常困难的任务，而规则引擎可以帮助您组织该逻辑。当您可以使用声明方法而非命令编程语言表达逻辑时，变化引入错误的可能性会大大降低。
如果代码变化可能导致大量的财政损失，则也应考虑规则引擎。许多组织在将已编译代码部署到托管环境中时具有严格的规则。例如，如果需要修改 Java 类中的逻辑，在更改进入生产环境之前，将会经历一个冗长乏味的过程：
必须重新编译应用程序代码。
在测试中转环境中删除代码。
由数据质量审核员检查代码。
由托管环境架构师批准更改。
计划代码部署。

那些规则适合采用业务规则引擎来进行实现，而其他的一些规则适合采用工作流引擎或者报表引擎来进行实现。
一般的规则引擎，最适合是那些数据结构确定的业务规则的处理。特别是这些规则是非常雷同的，可以说是平级的，然后反复的对同一批数据进行匹配处理。

如果规则非常少，或者说和数据结构的关系比较紧密，就不适合采用规则引擎来做。这类业务规则，可以在工作流引擎中，有些直接就采用sql语句等解决，或者说采用脚本语言来进行解决。因为规则引擎的应用反而显得非常累赘

业务规则引擎，就可以将绝大部分的项目中需要用到的后台逻辑采用业务规则引擎来进行实现。如此一来工作流引擎的压力就会大大减少，其只需要处理表单、流程 控制等，其他的一概都可以交给规则引擎来进行实现。工作流就只需要处理流程相关的一些数据结构，即使一些业务数据，也只需要事先传给工作流实例就行了，而 不需要再去考虑业务相关的其他一些数据结构等。

业务规则进行一个分类。不同的分类采用不同的管理方式。
   某一类业务规则，是纯粹和数据库结构相关的。比如增、删、改、查的逻辑等。这类业务规则侧重于数据的类型转化，或者一些简单的处理，大量的都是数据库操作 的SQL语句等。这类业务规则一般都由技术人员来进行维护，因此在采用规则引擎进行实现时，这类规则就没有必要放到业务规则管理系统中，进行一些权限控 制、版本控制等。而是有技术人员通过自身的配置管理技术来进行维护。在处理这类业务规则时，特别需要注意的是减少数据操作的次数。因此数据尽可能在规则中 处理完，然后再交给数据库去处理
另一类业务规则，是业务人员比较关心的，特别是一些表格类的规则，比如像一些决策表，或者一些参数表，基础数据表。这些表业务人员一般情况下，喜欢 采用Excel来进行维护。对于这类规则，就需要将这类表格还是采用Excel来进行维护，同时在规则引擎的实现中，将Excel表格数据进行集成。这类 规则需要采用业务规则管理系统进行管理，供业务人员查阅和修改。
    在后台的业务规则处理中，基本上分为这两类业务规则。因此

参考
漫话规则引擎(4)  Java规则引擎规范：JSR94 - 心内求法 - 博客园.htm
使用 Drools 规则引擎实现业务逻辑.htm
漫话规则引擎(1)  推理机和规则引擎 - 心内求法 - 博客园.htm
漫话规则引擎(2)  模式匹配算法 _ 学步园.htm
Rete算法的缺陷 - joeyshi的专栏 - 博客频道 - CSDN.NET.htm
业务规则分类 - joeyshi的专栏 - 博客频道 - CSDN.NET.htm

